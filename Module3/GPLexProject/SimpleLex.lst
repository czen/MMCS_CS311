
// ==========================================================================
//  GPLEX error listing for lex source file <SimpleLex.lex>
// ==========================================================================
//  Version:  1.1.3.301
//  Machine:  LAPTOP-GGETEDEO
//  DateTime: 22.09.2018 20:05:51
//  UserName: ???
// ==========================================================================


%using ScannerHelper;
%namespace SimpleScanner

Alpha 	[a-zA-Z_]
Digit   [0-9] 
AlphaDigit {Alpha}|{Digit}
INTNUM  {Digit}+
REALNUM {INTNUM}\.{INTNUM}
ID {Alpha}{AlphaDigit}* 
DotChr [^\r\n]
OneLineCmnt  \/\/{DotChr}*
StrApostr  \'[^']*\'

// Здесь можно делать описания типов, переменных и методов - они попадают в класс Scanner
%{
%x COMMENT
  public int LexValueInt;
  public double LexValueDouble;
  public int cntID = 0;
  private int sumID = 0;
  public int minID = 0;
  public int maxID = 0;
  public int sumInt = 0;
  public double sumDouble = 0;
%}

%%

"{" { 
  // переход в состояние COMMENT
  BEGIN(COMMENT);
}

<COMMENT> "}" { 
//^^^^^^
// Error: Start state <COMMENT> undefined
// --------------------------------------
  // переход в состояние INITIAL
  BEGIN(INITIAL);
  retrun (int)Tok.MULT_COMM;
}

{OneLineCmnt} {
	return (int)Tok.COMM;
}

{INTNUM} { 
  LexValueInt = int.Parse(yytext);      // yytext - текстовое представление текущей лексемы	
  return (int)Tok.INUM;
}

{REALNUM} { 
  LexValueDouble = double.Parse(yytext);
  return (int)Tok.RNUM;
}

begin { 
  return (int)Tok.BEGIN;
}

end { 
  return (int)Tok.END;
}

cycle { 
  return (int)Tok.CYCLE;
}

{ID}  { 
  return (int)Tok.ID;
}

":" { 
  return (int)Tok.COLON;
}

":=" { 
  return (int)Tok.ASSIGN;
}

";" { 
  return (int)Tok.SEMICOLON;
}

{StrApostr} {
	return (int)Tok.STR_IN_APOSTROPHES;
}

[^ \r\n] {
	LexError();
	return 0; // конец разбора
}

%%

// Здесь можно делать описания переменных и методов - они тоже попадают в класс Scanner

public void LexError()
{
	Console.WriteLine("({0},{1}): Неизвестный символ {2}", yyline, yycol, yytext);
}

public string TokToString(Tok tok)
{
	switch (tok)
	{
		case Tok.ID:
		{
			cntID += 1;
			sumID += yyleng;
			if(minID == 0 || minID > yyleng)
				minID = yyleng;
			if(maxID == 0 || maxID < yyleng)
				maxID = yyleng;
			return tok + " " + yytext;
		}
		case Tok.INUM:
		{
			sumInt += LexValueInt;
			return tok + " " + LexValueInt;
		}
		case Tok.RNUM:
		{
			sumDouble += LexValueDouble;
			return tok + " " + LexValueDouble;
		}
		default:
			return tok + "";
	}
}

public double AverageID(){
	if(cntID != 0)
		return (double)sumID / cntID;
	else
		return 0;
}

// ==========================================================================

