// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DEXP
// DateTime: 26.09.2018 12:27:58
// UserName: User
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,INUM=6,
    RNUM=7,ID=8,ASSIGN=9,SEMICOLON=10,WHILE=11,DO=12,
    REPEAT=13,UNTIL=14,FOR=15,TO=16,WRITE=17,OPENPAR=18,
    CLOSEPAR=19};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Ёти объ€влени€ добавл€ютс€ в класс GPPGParser, представл€ющий собой парсер, генерируемый системой gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[22];
  private static State[] states = new State[44];
  private static string[] nonTerms = new string[] {
      "progr", "$accept", "block", "stlist", "statement", "assign", "cycle", 
      "whiledo", "repeatuntil", "forcycle", "write", "ident", "expr", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{8,14,3,4,5,18,11,22,13,27,15,33,17,40},new int[]{-4,5,-5,31,-6,9,-12,10,-3,16,-7,17,-8,21,-9,26,-10,32,-11,39});
    states[5] = new State(new int[]{4,6,10,7});
    states[6] = new State(-16);
    states[7] = new State(new int[]{8,14,3,4,5,18,11,22,13,27,15,33,17,40},new int[]{-5,8,-6,9,-12,10,-3,16,-7,17,-8,21,-9,26,-10,32,-11,39});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{9,11});
    states[11] = new State(new int[]{8,14,6,15},new int[]{-13,12,-12,13});
    states[12] = new State(-13);
    states[13] = new State(-14);
    states[14] = new State(-12);
    states[15] = new State(-15);
    states[16] = new State(-6);
    states[17] = new State(-7);
    states[18] = new State(new int[]{8,14,6,15},new int[]{-13,19,-12,13});
    states[19] = new State(new int[]{8,14,3,4,5,18,11,22,13,27,15,33,17,40},new int[]{-5,20,-6,9,-12,10,-3,16,-7,17,-8,21,-9,26,-10,32,-11,39});
    states[20] = new State(-17);
    states[21] = new State(-8);
    states[22] = new State(new int[]{8,14,6,15},new int[]{-13,23,-12,13});
    states[23] = new State(new int[]{12,24});
    states[24] = new State(new int[]{8,14,3,4,5,18,11,22,13,27,15,33,17,40},new int[]{-5,25,-6,9,-12,10,-3,16,-7,17,-8,21,-9,26,-10,32,-11,39});
    states[25] = new State(-18);
    states[26] = new State(-9);
    states[27] = new State(new int[]{8,14,3,4,5,18,11,22,13,27,15,33,17,40},new int[]{-4,28,-5,31,-6,9,-12,10,-3,16,-7,17,-8,21,-9,26,-10,32,-11,39});
    states[28] = new State(new int[]{14,29,10,7});
    states[29] = new State(new int[]{8,14,6,15},new int[]{-13,30,-12,13});
    states[30] = new State(-19);
    states[31] = new State(-3);
    states[32] = new State(-10);
    states[33] = new State(new int[]{8,14},new int[]{-6,34,-12,10});
    states[34] = new State(new int[]{16,35});
    states[35] = new State(new int[]{8,14,6,15},new int[]{-13,36,-12,13});
    states[36] = new State(new int[]{12,37});
    states[37] = new State(new int[]{8,14,3,4,5,18,11,22,13,27,15,33,17,40},new int[]{-5,38,-6,9,-12,10,-3,16,-7,17,-8,21,-9,26,-10,32,-11,39});
    states[38] = new State(-20);
    states[39] = new State(-11);
    states[40] = new State(new int[]{18,41});
    states[41] = new State(new int[]{8,14,6,15},new int[]{-13,42,-12,13});
    states[42] = new State(new int[]{19,43});
    states[43] = new State(-21);

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-4, new int[]{-5});
    rules[4] = new Rule(-4, new int[]{-4,10,-5});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-3});
    rules[7] = new Rule(-5, new int[]{-7});
    rules[8] = new Rule(-5, new int[]{-8});
    rules[9] = new Rule(-5, new int[]{-9});
    rules[10] = new Rule(-5, new int[]{-10});
    rules[11] = new Rule(-5, new int[]{-11});
    rules[12] = new Rule(-12, new int[]{8});
    rules[13] = new Rule(-6, new int[]{-12,9,-13});
    rules[14] = new Rule(-13, new int[]{-12});
    rules[15] = new Rule(-13, new int[]{6});
    rules[16] = new Rule(-3, new int[]{3,-4,4});
    rules[17] = new Rule(-7, new int[]{5,-13,-5});
    rules[18] = new Rule(-8, new int[]{11,-13,12,-5});
    rules[19] = new Rule(-9, new int[]{13,-4,14,-13});
    rules[20] = new Rule(-10, new int[]{15,-6,16,-13,12,-5});
    rules[21] = new Rule(-11, new int[]{17,18,-13,19});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
